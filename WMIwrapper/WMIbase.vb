Imports System.Management

''' <summary>
''' A WMI object returned by WMI query.
''' </summary>
''' <remarks>
''' WMI classes can be generated by mgmtclassgen.
''' Use "C:\Program Files\Microsoft Visual Studio 8\SDK\v2.0\Bin\mgmtclassgen Win32_Volume /n root\cimv2 /l VB /p c:\a.vb"
''' to generate a .NET class for Win32_Volume in c:\a.vb
''' This project uses class inheritance to implement all WMI classes, while mgmtclassgen repeats all properties, methods and tools for each class.
''' </remarks>
Public MustInherit Class WMIobject
    Implements IDisposable

#Region "Constructors"

    ''' <summary>
    ''' Constructor.
    ''' </summary>
    ''' <remarks>
    ''' <para>Creates a new empty Management Object.</para>
    ''' <para>The object is not bound to an existing WMI instance.</para>
    ''' <para>The object scope, class and properties will be filled later.</para>
    ''' </remarks>
    Public Sub New()
        _ManagementObject = New ManagementObject
        _ManagementBaseObject = _ManagementObject
    End Sub

    ''' <summary>
    ''' Constructor.
    ''' </summary>
    ''' <param name="ClassName">The class name.</param>
    ''' <remarks>This constructor creates an unbound instance of the class.</remarks>
    Public Sub New(ByVal ClassName As String)
        _ManagementPath = New ManagementPath(ClassName)
        _ManagementObject = New ManagementClass(_ManagementPath).CreateInstance
        _ManagementBaseObject = _ManagementObject
    End Sub

    ''' <summary>
    ''' Constructor.
    ''' </summary>
    ''' <param name="Computer">The host computer.</param>
    ''' <param name="ClassPath">The class namespace.</param>
    ''' <param name="ClassName">The class name.</param>
    ''' <remarks>This constructor creates an unbound instance of the class.</remarks>
    Public Sub New(ByVal Computer As String, ByVal ClassName As String, Optional ByVal ClassPath As String = "root\cimv2")
        _ManagementPath = New ManagementPath("\\" & Computer & "\" & ClassPath & ":" & ClassName)
        _ManagementObject = New ManagementClass(_ManagementPath).CreateInstance
        _ManagementBaseObject = _ManagementObject
    End Sub

    ''' <summary>
    ''' Constructor.
    ''' </summary>
    ''' <param name="ManagementPath">The path to the object, as \\Computer\ClassPath:ClassName.Condition.</param>
    ''' <remarks>
    ''' <para>Creates a new Management Object bound to an existing WMI instance found by its scope, class and key.</para>
    ''' </remarks>
    Public Sub New(ByVal ManagementPath As ManagementPath)
        _ManagementPath = ManagementPath
        _ManagementObject = New ManagementObject(ManagementPath, Nothing)
        _ManagementBaseObject = _ManagementObject
        ' Possible exception: not found.
        _ManagementObject.Get()
    End Sub

    ''' <summary>
    ''' Constructor. 
    ''' </summary>
    ''' <param name="ManagementObject">The underlying management object.</param>
    ''' <remarks>
    ''' <para>The management object already exists (e.g. read from a collection).</para>
    ''' </remarks>
    Public Sub New(ByVal ManagementObject As ManagementObject)
        _ManagementObject = ManagementObject
        _ManagementBaseObject = _ManagementObject
    End Sub

    ''' <summary>
    ''' Constructor. 
    ''' </summary>
    ''' <param name="ManagementBaseObject">The underlying management base object.</param>
    ''' <remarks>
    ''' Alternate constructor, to use when a management base object is available instead of a management object.
    ''' Management base objects are returned as out parameters of methods.
    ''' </remarks>
    Public Sub New(ByVal ManagementBaseObject As ManagementBaseObject)
        _ManagementBaseObject = ManagementBaseObject
    End Sub

#End Region

#Region "Properties and fields"

    Protected _ManagementBaseObject As System.Management.ManagementBaseObject
    ''' <summary>
    ''' The underlying management base object as known by by WMI.
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks>
    ''' Equals <see cref="F:WMIwrapper.WMIobject._ManagementObject"></see>, except if the object was constructed from a management base object returned by a WMI method.
    ''' </remarks>
    Public ReadOnly Property ManagementBaseObject() As System.Management.ManagementBaseObject
        Get
            Return _ManagementBaseObject
        End Get
    End Property

    Protected _ManagementObject As System.Management.ManagementObject
    ''' <summary>
    ''' The underlying management object as known by by WMI.
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks>
    ''' The regular way to use this class defines this property.
    ''' It is Nothing only if the object was constructed from a management base object returned by a WMI method.
    ''' </remarks>
    Public ReadOnly Property ManagementObject() As System.Management.ManagementObject
        Get
            Return _ManagementObject
        End Get
    End Property

    ''' <summary>
    ''' The management path of the management object.
    ''' </summary>
    ''' <remarks></remarks>
    Protected _ManagementPath As ManagementPath

    ''' <summary>
    ''' The class name.
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public ReadOnly Property __CLASS() As String
        Get
            Return GetStringProperty("__CLASS")
        End Get
    End Property

    ''' <summary>
    ''' Array of classes this class derives from.
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public ReadOnly Property __DERIVATION() As String()
        Get
            Return GetStringArrayProperty("__DERIVATION")
        End Get
    End Property

    ''' <summary>
    ''' Top level class.
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public ReadOnly Property __DYNASTY() As String
        Get
            Return GetStringProperty("__DYNASTY")
        End Get
    End Property

    ''' <summary>
    ''' Class genus.
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public ReadOnly Property __GENUS() As Integer
        Get
            Return GetInt32Property("__GENUS")
        End Get
    End Property

    ''' <summary>
    ''' WMI Name space.
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public ReadOnly Property __NAMESPACE() As String
        Get
            Return GetStringProperty("__NAMESPACE")
        End Get
    End Property

    ''' <summary>
    ''' Path to this class.
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public ReadOnly Property __PATH() As String
        Get
            Return GetStringProperty("__PATH")
        End Get
    End Property

    ''' <summary>
    ''' Number of properties in this class
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public ReadOnly Property __PROPERTY_COUNT() As Integer
        Get
            Return GetInt32Property("__PROPERTY_COUNT")
        End Get
    End Property

    ''' <summary>
    ''' Relative path to this class.
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public ReadOnly Property __RELPATH() As String
        Get
            Return GetStringProperty("__RELPATH")
        End Get
    End Property

    ''' <summary>
    ''' Host Computer.
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public ReadOnly Property __SERVER() As String
        Get
            Return GetStringProperty("__SERVER")
        End Get
    End Property

    ''' <summary>
    ''' The class this class derives from.
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public ReadOnly Property __SUPERCLASS() As String
        Get
            Return GetStringProperty("__SUPERCLASS")
        End Get
    End Property
   
#End Region

#Region "Methods"

    ''' <summary>
    ''' Invoke a WMI method.
    ''' </summary>
    ''' <param name="Method">Method name.</param>
    ''' <param name="inParams">Method parameters.</param>
    ''' <param name="Options">Options.</param>
    ''' <returns>An <see cref="T:WMIwrapper.InvokeReturn"></see> containing result data. <see cref="P:WMIwrapper.InvokeReturn.ReturnValue"></see> contains the error code (O if OK).</returns>
    Public Function InvokeMethod(ByVal Method As String, Optional ByVal inParams As ManagementBaseObject = Nothing, Optional ByVal Options As InvokeMethodOptions = Nothing) As InvokeReturn
        If _ManagementObject IsNot Nothing Then
            Return New InvokeReturn(_ManagementObject.InvokeMethod(Method, inParams, Options))
        Else
            Return Nothing
        End If
    End Function

    ''' <summary>
    ''' Commit object changes.
    ''' </summary>
    ''' <remarks></remarks>
    Public Sub Put()
        If _ManagementObject IsNot Nothing Then
            _ManagementObject.InvokeMethod("Put", Nothing, Nothing)
        End If
    End Sub

    ''' <summary>
    ''' Rebind the underlying management object.
    ''' </summary>
    ''' <remarks>May fail if the object does not exist or for other reason. No exception is raised.</remarks>
    Public Sub Refresh()
        Try
            _ManagementObject.Get()
        Catch ex As Exception
            ' No consequence
        End Try
    End Sub

    ''' <summary>
    ''' Get a property and return it as an object.
    ''' </summary>
    ''' <param name="PropertyName">The property name.</param>
    ''' <returns>The property object.</returns>
    ''' <remarks>If the property does not exist, return Nothing.</remarks>
    Protected Function GetPropertyObject(ByRef PropertyName As String) As Object
        Try
            Return _ManagementBaseObject.GetPropertyValue(PropertyName)
        Catch ex As Exception
            Return Nothing
        End Try
    End Function

    ''' <summary>
    ''' Get a property and return it.
    ''' </summary>
    ''' <param name="PropertyName">The property name.</param>
    ''' <returns>The property value.</returns>
    ''' <remarks></remarks>
    Protected Function GetBooleanProperty(ByVal PropertyName As String) As Boolean
        Dim obj As Object = GetPropertyObject(PropertyName)
        If obj Is Nothing Then
            Return Nothing
        Else
            Return CType(obj, Boolean)
        End If
    End Function

    ''' <summary>
    ''' Get a property and return it.
    ''' </summary>
    ''' <param name="PropertyName">The property name.</param>
    ''' <returns>The property value.</returns>
    ''' <remarks></remarks>
    Protected Function GetByteProperty(ByVal PropertyName As String) As Byte
        Dim obj As Object = GetPropertyObject(PropertyName)
        If obj Is Nothing Then
            Return Nothing
        Else
            Return CType(obj, Byte)
        End If
    End Function

    ''' <summary>
    ''' Get a property and return it.
    ''' </summary>
    ''' <param name="PropertyName">The property name.</param>
    ''' <returns>The property value.</returns>
    ''' <remarks></remarks>
    Protected Function GetByteArrayProperty(ByVal PropertyName As String) As Byte()
        Dim obj As Object = GetPropertyObject(PropertyName)
        If obj Is Nothing Then
            Return Nothing
        Else
            Return CType(obj, Byte())
        End If
    End Function

    ''' <summary>
    ''' Get a property and return it.
    ''' </summary>
    ''' <param name="PropertyName">The property name.</param>
    ''' <returns>The property value.</returns>
    ''' <remarks>
    ''' Inspired from <a href="http://blogs.clearscreen.com/dtax/archive/2007/01/19/5985.aspx">Jesus Jimenez blog</a>
    ''' </remarks>
    Protected Function GetDateTimeProperty(ByVal PropertyName As String) As DateTime
        Dim obj As Object = GetPropertyObject(PropertyName)
        If obj Is Nothing Then
            Return Nothing
        Else
            ' The CIM_DateTime format is represented by the following string: 
            ' yyyy MM dd hh mm ss.mmm mmm UTC
            ' 2007 01 12 20 45 59.115 081+060
            Dim strDate As String = obj.ToString
            ' Check date integrity
            If strDate IsNot Nothing AndAlso strDate.IndexOf("."c) <> -1 Then
                Try
                    With strDate
                        ' Extract each date component
                        Dim year As Integer = Convert.ToInt32(.Substring(0, 4))
                        Dim month As Integer = Convert.ToInt32(.Substring(4, 2))
                        Dim day As Integer = Convert.ToInt32(.Substring(6, 2))
                        Dim hour As Integer = Convert.ToInt32(.Substring(8, 2))
                        Dim minute As Integer = Convert.ToInt32(.Substring(10, 2))
                        Dim second As Integer = Convert.ToInt32(.Substring(12, 2))
                        Dim milisecond As Integer = Convert.ToInt32(.Substring(15, 3))
                        ' Compose the new datetime object.
                        Dim datRaw As DateTime = New DateTime(year, month, day, hour, minute, second, milisecond)
                        ' Correct for UTC value to get UTC time and change it to local time.
                        Dim utcCorrection As Integer = Convert.ToInt32(.Substring(21))
                        Return datRaw.AddMinutes(-utcCorrection).ToLocalTime
                    End With
                Catch ex As Exception
                    Return Nothing
                End Try
            Else
                Return Nothing
            End If
        End If
    End Function

    ''' <summary>
    ''' Get a property and return it.
    ''' </summary>
    ''' <param name="PropertyName">The property name.</param>
    ''' <returns>The property value.</returns>
    ''' <remarks></remarks>
    Protected Function GetDoubleProperty(ByVal PropertyName As String) As Double
        Dim obj As Object = GetPropertyObject(PropertyName)
        If obj Is Nothing Then
            Return Nothing
        Else
            Return CType(obj, Double)
        End If
    End Function

    ''' <summary>
    ''' Get a property and return it.
    ''' </summary>
    ''' <param name="PropertyName">The property name.</param>
    ''' <returns>The property value.</returns>
    ''' <remarks></remarks>
    Protected Function GetInt16Property(ByVal PropertyName As String) As Int16
        Dim obj As Object = GetPropertyObject(PropertyName)
        If obj Is Nothing Then
            Return Nothing
        Else
            Return CType(obj, Int16)
        End If
    End Function

    ''' <summary>
    ''' Get a property and return it.
    ''' </summary>
    ''' <param name="PropertyName">The property name.</param>
    ''' <returns>The property value.</returns>
    ''' <remarks></remarks>
    Protected Function GetInt32Property(ByVal PropertyName As String) As Int32
        Dim obj As Object = GetPropertyObject(PropertyName)
        If obj Is Nothing Then
            Return Nothing
        Else
            Return CType(obj, Int32)
        End If
    End Function

    ''' <summary>
    ''' Get a property and return it.
    ''' </summary>
    ''' <param name="PropertyName">The property name.</param>
    ''' <returns>The property value.</returns>
    ''' <remarks></remarks>
    Protected Function GetInt64Property(ByVal PropertyName As String) As Int64
        Dim obj As Object = GetPropertyObject(PropertyName)
        If obj Is Nothing Then
            Return Nothing
        Else
            Return CType(obj, Int64)
        End If
    End Function

    ''' <summary>
    ''' Get a property and return it.
    ''' </summary>
    ''' <param name="PropertyName">The property name.</param>
    ''' <returns>The property value.</returns>
    ''' <remarks></remarks>
    Protected Function GetStringProperty(ByVal PropertyName As String) As String
        Return TryCast(GetPropertyObject(PropertyName), String)
    End Function

    ''' <summary>
    ''' Get a property and return it.
    ''' </summary>
    ''' <param name="PropertyName">The property name.</param>
    ''' <returns>The property value.</returns>
    ''' <remarks></remarks>
    Protected Function GetStringArrayProperty(ByVal PropertyName As String) As String()
        Return TryCast(GetPropertyObject(PropertyName), String())
    End Function

    ''' <summary>
    ''' Get a property and return it.
    ''' </summary>
    ''' <param name="PropertyName">The property name.</param>
    ''' <returns>The property value.</returns>
    ''' <remarks></remarks>
    Protected Function GetUint16Property(ByVal PropertyName As String) As UInt16
        Dim obj As Object = GetPropertyObject(PropertyName)
        If obj Is Nothing Then
            Return Nothing
        Else
            Return CType(obj, UInt16)
        End If
    End Function

    ''' <summary>
    ''' Get a property and return it.
    ''' </summary>
    ''' <param name="PropertyName">The property name.</param>
    ''' <returns>The property value.</returns>
    ''' <remarks></remarks>
    Protected Function GetUint16ArrayProperty(ByVal PropertyName As String) As UInt16()
        Dim obj As Object = GetPropertyObject(PropertyName)
        If obj Is Nothing Then
            Return Nothing
        Else
            Return CType(obj, UInt16())
        End If
    End Function

    ''' <summary>
    ''' Get a property and return it.
    ''' </summary>
    ''' <param name="PropertyName">The property name.</param>
    ''' <returns>The property value.</returns>
    ''' <remarks></remarks>
    Protected Function GetUint32Property(ByVal PropertyName As String) As UInt32

        Dim obj As Object = GetPropertyObject(PropertyName)
        If obj Is Nothing Then
            Return Nothing
        Else
            Return CType(obj, UInt32)
        End If
    End Function

    ''' <summary>
    ''' Get a property and return it.
    ''' </summary>
    ''' <param name="PropertyName">The property name.</param>
    ''' <returns>The property value.</returns>
    ''' <remarks></remarks>
    Protected Function GetUint64Property(ByVal PropertyName As String) As UInt64
        Dim obj As Object = GetPropertyObject(PropertyName)
        If obj Is Nothing Then
            Return Nothing
        Else
            Return CType(obj, UInt64)
        End If
    End Function

    ''' <summary>
    ''' Transforms a ManagementBaseObject property into a trustee.
    ''' </summary>
    ''' <param name="PropertyName"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Protected Function GetTrustee(Optional ByVal PropertyName As String = "Trustee") As Win32_Trustee
        Dim obj As Object = GetPropertyObject(PropertyName)
        If obj Is Nothing Then
            Return Nothing
        Else
            Dim mbo As ManagementBaseObject = CType(obj, ManagementBaseObject)
            If mbo Is Nothing Then
                Return Nothing
            Else
                Dim Trustee As New Win32_Trustee
                Trustee.ReadFromManagementBaseObject(mbo)
                Return Trustee
            End If
        End If
    End Function

    ''' <summary>
    ''' Transforms a ManagementBaseObject property into an ACE array.
    ''' </summary>
    ''' <param name="PropertyName"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Protected Function GetACEs(ByVal PropertyName As String) As Win32_ACE()

        Dim obj As Object = GetPropertyObject(PropertyName)
        If obj Is Nothing Then
            Return Nothing
        Else
            Dim ManagementBaseObjects() As ManagementBaseObject = CType(obj, ManagementBaseObject())
            If ManagementBaseObjects Is Nothing Then
                Return Nothing
            Else
                Dim _Win32_ACE(ManagementBaseObjects.Length - 1) As Win32_ACE
                For intI As Integer = 0 To ManagementBaseObjects.Length - 1
                    Dim ACE As New Win32_ACE
                    ACE.ReadFromManagementBaseObject(ManagementBaseObjects(intI))
                    _Win32_ACE(intI) = ACE
                Next
                Return _Win32_ACE
            End If
        End If
    End Function

    ''' <summary>
    ''' Return the error message corresponding to the error code.
    ''' </summary>
    ''' <param name="Number">Error number.</param>
    ''' <returns>A string containing the error message.</returns>
    ''' <remarks>Default error messages. Should be overridden.</remarks>
    Protected Overridable Function ErrorMessage(ByVal Number As UInteger) As String
        Select Case Number
            Case 0
                Return "Success"
            Case Else
                Return "A Method in Class " & _ManagementObject.ClassPath.ClassName & " failed with Error " & Number.ToString
        End Select
    End Function


    ''' <summary>
    ''' Dispose.
    ''' </summary>
    ''' <remarks></remarks>
    Public Sub Dispose() Implements System.IDisposable.Dispose
        ' Dispose the WMI object
        _ManagementObject.Dispose()
        _ManagementBaseObject.Dispose()
        ' Call the garbage collector
        GC.SuppressFinalize(Me)
    End Sub

#End Region

End Class



''' <summary>
''' Abstract class to query WMI.
''' </summary>
''' <remarks>Use inheriting classes to access objects.</remarks>
Public MustInherit Class WMIobjects
    Inherits System.Collections.CollectionBase
    Implements IDisposable

    ''' <summary>
    ''' Constructor.
    ''' </summary>
    ''' <param name="Computer">The host computer.</param>
    ''' <param name="ClassPath">The class namespace.</param>
    ''' <param name="ClassName">The class name.</param>
    ''' <remarks></remarks>
    Public Sub New(ByVal Computer As String, ByVal ClassName As String, Optional ByVal ClassPath As String = "root\cimv2")
        _ManagementPath = New ManagementPath("\\" & Computer & "\" & ClassPath & ":" & ClassName)
    End Sub

#Region "Properties and fields"

    Private _ManagementPath As ManagementPath
    ''' <summary>
    ''' Management path of the class.
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks>Contains Server,Path and Class Name</remarks>
    Public ReadOnly Property ManagementPath() As ManagementPath
        Get
            Return _ManagementPath
        End Get
    End Property

#End Region

#Region "Methods"

    ''' <summary>
    ''' Read the collection.
    ''' </summary>
    ''' <param name="Condition">A WQL condition to select specific items in the collection, such as <c>Property = 'Value'</c>.</param>
    ''' <returns>True if the collection was read.</returns>
    ''' <remarks>See <a href="http://msdn.microsoft.com/en-us/library/aa394606(VS.85).aspx">MSDN</a> for WQL reference.</remarks>
    Protected Function Read(Optional ByVal Condition As String = Nothing) As ManagementObjectCollection

        ' Connect to the computer
        Dim Scope As New ManagementScope(_ManagementPath)
        ' Create the query
        Dim query As New SelectQuery(_ManagementPath.ClassName, Condition)
        ' Create a ManagementObjectSearcher object passing in the query to run.
        Using searcher As ManagementObjectSearcher = New ManagementObjectSearcher(query)
            searcher.Scope = Scope
            ' Read the collection
            Return searcher.Get()
        End Using

    End Function

    ''' <summary>
    ''' Add an item to the collection.
    ''' </summary>
    ''' <param name="NewWMIobject">The object to add to the collection.</param>
    ''' <remarks></remarks>
    Public Sub Add(ByVal NewWMIobject As WMIobject)
        ' Add the object to the collection
        List.Add(NewWMIobject)
    End Sub

    ''' <summary>
    ''' Find an item in the collection.
    ''' </summary>
    ''' <param name="index">Index of the item.</param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Protected Function Item(ByVal index As Integer) As WMIobject
        Return CType(List.Item(index), WMIobject)
    End Function

    ''' <summary>
    ''' Remove an item from the collection.
    ''' </summary>
    ''' <param name="WMIObjectToRemove">The WMIObject to remove.</param>
    ''' <remarks></remarks>
    Public Overloads Sub Remove(ByVal WMIObjectToRemove As WMIobject)
        If WMIObjectToRemove IsNot Nothing Then
            List.Remove(WMIObjectToRemove)
        End If
    End Sub

    ''' <summary>
    ''' Dispose.
    ''' </summary>
    ''' <remarks></remarks>
    Public Sub Dispose() Implements System.IDisposable.Dispose
        ' Dispose the WMI objects
        For Each WMIobjectI As WMIobject In Me
            WMIobjectI.Dispose()
        Next
        ' Call the garbage collector
        GC.SuppressFinalize(Me)
    End Sub

#End Region

End Class



''' <summary>
''' Invoke method OutParams wrapper.
''' </summary>
''' <remarks></remarks>
Public Class InvokeReturn

    ''' <summary>
    ''' Constructor
    ''' </summary>
    ''' <param name="outParams">The object to wrap.</param>
    ''' <remarks></remarks>
    Public Sub New(ByVal outParams As ManagementBaseObject)
        _outParams = outParams
    End Sub

    Private _outParams As ManagementBaseObject
    ''' <summary>
    ''' The Object containing return values from WMI.
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks>May be used to access specific items.</remarks>
    Public ReadOnly Property outParams() As ManagementBaseObject
        Get
            Return _outParams
        End Get
    End Property

    ''' <summary>
    ''' Return value of the invoke method.
    ''' </summary>
    ''' <value></value>
    ''' <returns>An error code. 0 is for no error, other values are specific to the WMI class and may be translated into a Win32 Exception code.</returns>
    ''' <remarks></remarks>
    Public ReadOnly Property ReturnValue() As UInteger
        Get
            Return CType(_outParams.Item("ReturnValue"), UInteger)
        End Get
    End Property

End Class



''' <summary>
''' Error Container.
''' </summary>
''' <remarks></remarks>
Public Class InvokeError

    ''' <summary>
    ''' Constructor.
    ''' </summary>
    ''' <param name="Number">Error Number.</param>
    ''' <param name="Message">Error Message.</param>
    ''' <remarks></remarks>
    Sub New(ByVal Number As UInteger, ByVal Message As String)
        _Number = Number
        _Message = Message
    End Sub

    Private _Number As UInteger
    ''' <summary>
    ''' Error Number.
    ''' </summary>
    ''' <remarks></remarks>
    Public ReadOnly Property Number() As UInteger
        Get
            Return _Number
        End Get
     End Property

    Public _Message As String
    ''' <summary>
    ''' Error message.
    ''' </summary>
    ''' <remarks></remarks>
    Public ReadOnly Property Message() As String
        Get
            Return _Message
        End Get
     End Property

End Class
 